package template

import (
	"go/ast"
	"go/parser"
	"go/token"
	"os"
	"path/filepath"
	"strings"

	"go.uber.org/zap"
)

// ASTParser handles parsing of Go files to discover template functions
type ASTParser struct {
	logger *zap.Logger
}

// NewASTParser creates a new AST parser
func NewASTParser(logger *zap.Logger) *ASTParser {
	return &ASTParser{
		logger: logger,
	}
}

// ParseTemplateFile parses a Go file and extracts template function names
func (ap *ASTParser) ParseTemplateFile(filePath string) []string {
	var functions []string

	// Parse the Go file
	fset := token.NewFileSet()
	node, err := parser.ParseFile(fset, filePath, nil, parser.ParseComments)
	if err != nil {
		ap.logger.Error("Error parsing Go file", zap.String("file", filePath), zap.Error(err))
		return functions
	}

	// Walk the AST to find functions that return templ.Component
	ast.Inspect(node, func(n ast.Node) bool {
		if fn, ok := n.(*ast.FuncDecl); ok {
			// Check if function returns templ.Component
			if ap.isTemplateFunction(fn) {
				functions = append(functions, fn.Name.Name)
			}
		}
		return true
	})

	return functions
}

// isTemplateFunction checks if a function declaration returns templ.Component
func (ap *ASTParser) isTemplateFunction(fn *ast.FuncDecl) bool {
	if fn.Type.Results == nil || len(fn.Type.Results.List) != 1 {
		return false
	}

	result := fn.Type.Results.List[0]
	if sel, ok := result.Type.(*ast.SelectorExpr); ok {
		if ident, ok := sel.X.(*ast.Ident); ok {
			return ident.Name == "templ" && sel.Sel.Name == "Component"
		}
	}

	return false
}

// ScanDirectory scans a directory for template files and extracts function names
func (ap *ASTParser) ScanDirectory(rootDir string) map[string][]string {
	templateFiles := make(map[string][]string)

	err := filepath.Walk(rootDir, func(path string, info os.FileInfo, err error) error {
		if err != nil {
			return err
		}

		// Only process *_templ.go files (generated by templ)
		if strings.HasSuffix(path, "_templ.go") {
			ap.logger.Debug("Scanning template file", zap.String("file", path))
			functions := ap.ParseTemplateFile(path)
			if len(functions) > 0 {
				templateFiles[path] = functions
				ap.logger.Info("Found template functions",
					zap.String("file", path),
					zap.Strings("functions", functions))
			}
		}

		return nil
	})

	if err != nil {
		ap.logger.Error("Error scanning directory", zap.String("dir", rootDir), zap.Error(err))
	}

	return templateFiles
}